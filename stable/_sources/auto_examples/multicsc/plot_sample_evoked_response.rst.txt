
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multicsc/plot_sample_evoked_response.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multicsc_plot_sample_evoked_response.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multicsc_plot_sample_evoked_response.py:


=====================================================================
Extracting artifact and evoked response atoms from the sample dataset
=====================================================================

This example illustrates how to learn rank-1 [1]_ atoms on the multivariate
sample dataset from :code:`mne`. We display a selection of atoms, featuring
heartbeat and eyeblink artifacts, three atoms of evoked responses, and a
non-sinusoidal oscillation.

.. [1] Dupr√© La Tour, T., Moreau, T., Jas, M., & Gramfort, A. (2018).
    `Multivariate Convolutional Sparse Coding for Electromagnetic Brain Signals
    <https://arxiv.org/abs/1805.09654v2>`_. Advances in Neural Information
    Processing Systems (NIPS).

.. GENERATED FROM PYTHON SOURCE LINES 16-24

.. code-block:: default


    # Authors: Thomas Moreau <thomas.moreau@inria.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Let us first define the parameters of our model.

.. GENERATED FROM PYTHON SOURCE LINES 26-40

.. code-block:: default


    # sample frequency
    sfreq = 150.

    # Define the shape of the dictionary
    n_atoms = 40
    n_times_atom = int(round(sfreq * 1.0))  # 1000. ms

    # Regularization parameter which control sparsity
    reg = 0.1

    # number of processors for parallel computing
    n_jobs = 5








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Next, we define the parameters for multivariate CSC

.. GENERATED FROM PYTHON SOURCE LINES 42-78

.. code-block:: default


    from alphacsc import GreedyCDL
    cdl = GreedyCDL(
        # Shape of the dictionary
        n_atoms=n_atoms,
        n_times_atom=n_times_atom,
        # Request a rank1 dictionary with unit norm temporal and spatial maps
        rank1=True,
        uv_constraint='separate',
        # apply a temporal window reparametrization
        window=True,
        # at the end, refit the activations with fixed support and no reg to unbias
        unbiased_z_hat=True,
        # Initialize the dictionary with random chunk from the data
        D_init='chunk',
        # rescale the regularization parameter to be a percentage of lambda_max
        lmbd_max="scaled",
        reg=reg,
        # Number of iteration for the alternate minimization and cvg threshold
        n_iter=100,
        eps=1e-4,
        # solver for the z-step
        solver_z="lgcd",
        solver_z_kwargs={'tol': 1e-2,
                         'max_iter': 10000},
        # solver for the d-step
        solver_d='alternate_adaptive',
        solver_d_kwargs={'max_iter': 300},
        # sort atoms by explained variances
        sort_atoms=True,
        # Technical parameters
        verbose=1,
        random_state=0,
        n_jobs=n_jobs)









.. GENERATED FROM PYTHON SOURCE LINES 79-82

Here, we load the data from the sample datase. The data is not epoched yet,
but we split it into 12 parts to make the most of multiple processors during
the model fitting.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default


    from alphacsc.datasets.somato import load_data
    X_split, info = load_data(sfreq=sfreq, dataset='sample', n_splits=2 * n_jobs)








.. GENERATED FROM PYTHON SOURCE LINES 87-88

Fit the model and learn rank1 atoms

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    cdl.fit(X_split)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ./home/sed-sac/hgozukan/dev/alphacsc/alphacsc/utils/optim.py:124: DeprecationWarning: Please use `line_search_armijo` from the `scipy.optimize` namespace, the `scipy.optimize.linesearch` namespace is deprecated.
      step_size, _, obj_uv = optimize.linesearch.line_search_armijo(
    ................................................+
    ..
    [GreedyCDL] Converged after 52 iteration, (dz, du) = 8.622e-05, 8.677e-05
    [GreedyCDL] Fit in 1346.4s

    <alphacsc.convolutional_dictionary_learning.GreedyCDL object at 0x7f558007a070>



.. GENERATED FROM PYTHON SOURCE LINES 91-92

To avoid artifacts due to the splitting, we can optionally reload the data.

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: default

    X, info = load_data(sfreq=sfreq, dataset='sample', n_splits=1)








.. GENERATED FROM PYTHON SOURCE LINES 95-97

Then we call the `transform` method, which returns the sparse codes
associated with X, without changing the dictionary learned during the `fit`.

.. GENERATED FROM PYTHON SOURCE LINES 97-100

.. code-block:: default

    z_hat = cdl.transform(X)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Refitting the activation to avoid amplitude bias...
    done




.. GENERATED FROM PYTHON SOURCE LINES 101-104

Display a selection of atoms. We recognize a heartbeat artifact, an
eyeblink artifact, three atoms of evoked responses, and a non-sinusoidal
oscillation.

.. GENERATED FROM PYTHON SOURCE LINES 104-156

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    from alphacsc.utils.convolution import construct_X_multi
    from alphacsc.viz.epoch import plot_evoked_surrogates

    # preselected atoms of interest
    plotted_atoms = [2, 0, 3, 15, 20, 11]

    n_plots = 3  # number of plots by atom
    n_columns = min(6, len(plotted_atoms))
    split = int(np.ceil(len(plotted_atoms) / n_columns))
    figsize = (4 * n_columns, 3 * n_plots * split)
    fig, axes = plt.subplots(n_plots * split, n_columns, figsize=figsize)
    for ii, kk in enumerate(plotted_atoms):

        # Select the axes to display the current atom
        print("\rDisplaying {}-th atom".format(kk), end='', flush=True)
        i_row, i_col = ii // n_columns, ii % n_columns
        it_axes = iter(axes[i_row * n_plots:(i_row + 1) * n_plots, i_col])

        # Select the current atom
        u_k = cdl.u_hat_[kk]
        v_k = cdl.v_hat_[kk]

        # Plot the spatial map of the atom using mne topomap
        ax = next(it_axes)
        mne.viz.plot_topomap(u_k, info, axes=ax, show=False)
        ax.set(title="Spatial pattern %d" % (kk, ))

        # Plot the temporal pattern of the atom
        ax = next(it_axes)
        t = np.arange(n_times_atom) / sfreq
        ax.plot(t, v_k)
        ax.set_xlim(0, n_times_atom / sfreq)
        ax.set(xlabel='Time (sec)', title="Temporal pattern %d" % kk)

        # Plot the power spectral density (PSD)
        ax = next(it_axes)
        psd = np.abs(np.fft.rfft(v_k, n=256)) ** 2
        frequencies = np.linspace(0, sfreq / 2.0, len(psd))
        ax.semilogy(frequencies, psd, label='PSD', color='k')
        ax.set(xlabel='Frequencies (Hz)', title="Power spectral density %d" % kk)
        ax.grid(True)
        ax.set_xlim(0, 30)
        ax.set_ylim(1e-4, 1e2)
        ax.legend()

    fig.tight_layout()




.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_001.png
   :alt: Spatial pattern 2, Spatial pattern 0, Spatial pattern 3, Spatial pattern 15, Spatial pattern 20, Spatial pattern 11, Temporal pattern 2, Temporal pattern 0, Temporal pattern 3, Temporal pattern 15, Temporal pattern 20, Temporal pattern 11, Power spectral density 2, Power spectral density 0, Power spectral density 3, Power spectral density 15, Power spectral density 20, Power spectral density 11
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Displaying 2-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/channels/layout.py:128: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pos.append(np.array([x, y, dx, dy], dtype=np.float))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/viz/topomap.py:482: DeprecationWarning: Please use `Delaunay` from the `scipy.spatial` namespace, the `scipy.spatial.qhull` namespace is deprecated.
      from scipy.spatial.qhull import Delaunay
    Displaying 0-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/channels/layout.py:128: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pos.append(np.array([x, y, dx, dy], dtype=np.float))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/viz/topomap.py:482: DeprecationWarning: Please use `Delaunay` from the `scipy.spatial` namespace, the `scipy.spatial.qhull` namespace is deprecated.
      from scipy.spatial.qhull import Delaunay
    Displaying 3-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/channels/layout.py:128: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pos.append(np.array([x, y, dx, dy], dtype=np.float))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/viz/topomap.py:482: DeprecationWarning: Please use `Delaunay` from the `scipy.spatial` namespace, the `scipy.spatial.qhull` namespace is deprecated.
      from scipy.spatial.qhull import Delaunay
    Displaying 15-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/channels/layout.py:128: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pos.append(np.array([x, y, dx, dy], dtype=np.float))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/viz/topomap.py:482: DeprecationWarning: Please use `Delaunay` from the `scipy.spatial` namespace, the `scipy.spatial.qhull` namespace is deprecated.
      from scipy.spatial.qhull import Delaunay
    Displaying 20-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/channels/layout.py:128: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pos.append(np.array([x, y, dx, dy], dtype=np.float))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/viz/topomap.py:482: DeprecationWarning: Please use `Delaunay` from the `scipy.spatial` namespace, the `scipy.spatial.qhull` namespace is deprecated.
      from scipy.spatial.qhull import Delaunay
    Displaying 11-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/channels/layout.py:128: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pos.append(np.array([x, y, dx, dy], dtype=np.float))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/viz/topomap.py:482: DeprecationWarning: Please use `Delaunay` from the `scipy.spatial` namespace, the `scipy.spatial.qhull` namespace is deprecated.
      from scipy.spatial.qhull import Delaunay




.. GENERATED FROM PYTHON SOURCE LINES 157-163

Display the evoked reconstructed enveloppe:
For each atom (columns), and for each event (rows), we compute the enveloppe
of the reconstructed signal, align it with respect to the event onsets, and
take the average. For some atoms, the activations are correlated with the
events, leading to a large evoked enveloppe. The gray area corresponds to
not statistically significant values.

.. GENERATED FROM PYTHON SOURCE LINES 163-207

.. code-block:: default


    from copy import deepcopy
    from alphacsc.utils.signal import fast_hilbert

    # time window around the events
    t_lim = (-0.1, 0.5)

    n_plots = len(np.atleast_1d(info['event_id']))
    n_columns = min(6, len(plotted_atoms))
    split = int(np.ceil(len(plotted_atoms) / n_columns))
    figsize = (4 * n_columns, 3 * n_plots * split)
    fig, axes = plt.subplots(n_plots * split, n_columns, figsize=figsize)

    for ii, kk in enumerate(plotted_atoms):

        # Select the axes to display the current atom
        print("\rDisplaying {}-th atom".format(kk), end='', flush=True)
        i_row, i_col = ii // n_columns, ii % n_columns
        it_axes = iter(axes[i_row * n_plots:(i_row + 1) * n_plots, i_col])

        # Select the current atom
        v_k = cdl.v_hat_[kk]
        v_k_1 = np.r_[[1], v_k][None]
        z_k = z_hat[:, kk:kk + 1]
        X_k = construct_X_multi(z_k, v_k_1, n_channels=1)[0, 0]

        # compute the 'enveloppe' of the reconstructed signal X_k
        correlation = np.abs(fast_hilbert(X_k))

        # loop over all events IDs
        for this_event_id in np.atleast_1d(info['event_id']):
            # select the event by its ID, and create a new info dictionary
            this_info = deepcopy(info)
            this_info['events'] = this_info['events'][this_info['events'][:, 2] ==
                                                      this_event_id]
            this_info['event_id'] = this_event_id

            # plotting function
            ax = next(it_axes)
            plot_evoked_surrogates(correlation, info=this_info, t_lim=t_lim, ax=ax,
                                   n_jobs=n_jobs, label='event %d' % this_event_id)
            ax.set(xlabel='Time (sec)', title="Evoked enveloppe %d" % kk)

    fig.tight_layout()



.. image-sg:: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_002.png
   :alt: Evoked enveloppe 2, Evoked enveloppe 0, Evoked enveloppe 3, Evoked enveloppe 15, Evoked enveloppe 20, Evoked enveloppe 11, Evoked enveloppe 2, Evoked enveloppe 0, Evoked enveloppe 3, Evoked enveloppe 15, Evoked enveloppe 20, Evoked enveloppe 11, Evoked enveloppe 2, Evoked enveloppe 0, Evoked enveloppe 3, Evoked enveloppe 15, Evoked enveloppe 20, Evoked enveloppe 11, Evoked enveloppe 2, Evoked enveloppe 0, Evoked enveloppe 3, Evoked enveloppe 15, Evoked enveloppe 20, Evoked enveloppe 11
   :srcset: /auto_examples/multicsc/images/sphx_glr_plot_sample_evoked_response_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Displaying 2-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    Displaying 0-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    Displaying 3-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    Displaying 15-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    Displaying 20-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    Displaying 11-th atom/scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/meas_info.py:1775: DeprecationWarning: `np.str` is a deprecated alias for the builtin `str`. To silence this warning, use `str` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.str_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      ch_types = np.atleast_1d(np.array(ch_types, np.str))
    /scratch/hgozukan/miniconda3/lib/python3.8/site-packages/mne/io/pick.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      pick = np.zeros(nchan, dtype=np.bool)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 24 minutes  53.371 seconds)


.. _sphx_glr_download_auto_examples_multicsc_plot_sample_evoked_response.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_sample_evoked_response.py <plot_sample_evoked_response.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_sample_evoked_response.ipynb <plot_sample_evoked_response.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
