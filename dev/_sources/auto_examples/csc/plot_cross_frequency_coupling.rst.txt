
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/csc/plot_cross_frequency_coupling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_csc_plot_cross_frequency_coupling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_csc_plot_cross_frequency_coupling.py:


==================================================================
Extracting cross-frequency coupling waveforms from rodent LFP data
==================================================================

This example illustrates how to learn univariate atoms on a univariate
time-serie. The data is a single LFP channel recorded on a rodent's striatum
[1]_. Interestingly in this time-serie, the high frequency oscillations around
80 Hz are modulated in amplitude by the low-frequency oscillation around 3 Hz,
a phenomenon known as cross-frequency coupling (CFC).

The convolutional sparse coding (CSC) model is able to learn the prototypical
waveforms of the signal, on which we can clearly see the CFC.

.. [1] G. Dallérac, M. Graupner, J. Knippenberg, R. C. R. Martinez,
    T. F. Tavares, L. Tallot, N. El Massioui, A. Verschueren, S. Höhn,
    J.B. Bertolus, et al. Updating temporal expectancy of an aversive event
    engages striatal plasticity under amygdala control.
    Nature Communications, 8:13920, 2017

.. GENERATED FROM PYTHON SOURCE LINES 21-29

.. code-block:: default


    # Authors: Tom Dupre La Tour <tom.duprelatour@telecom-paristech.fr>
    #          Mainak Jas <mainak.jas@telecom-paristech.fr>
    #          Umut Simsekli <umut.simsekli@telecom-paristech.fr>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Let us first load the data sample.

.. GENERATED FROM PYTHON SOURCE LINES 31-43

.. code-block:: default


    import mne
    import numpy as np
    import matplotlib.pyplot as plt

    # sample frequency
    sfreq = 350.

    # We load the signal. It is an LFP channel recorded on a rodent's striatum.
    data = np.load('../rodent_striatum.npy')
    print(data.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (1, 630000)




.. GENERATED FROM PYTHON SOURCE LINES 44-46

As the data contains severe artifacts between t=0 and t=100, we use a
section not affected by artifacts.

.. GENERATED FROM PYTHON SOURCE LINES 46-56

.. code-block:: default


    data = data[:, 35000:]

    # We also remove the slow drift, which accounts for a lot of variance.
    data = mne.filter.filter_data(data, sfreq, 1, None)

    # To make the most of parallel computing, we split the data into trials.
    data = data.reshape(50, -1)
    data /= data.std()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Setting up high-pass filter at 1 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal highpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 1.00 Hz (-6 dB cutoff frequency: 0.50 Hz)
    - Filter length: 1155 samples (3.300 sec)





.. GENERATED FROM PYTHON SOURCE LINES 57-60

This sample contains CFC between 3 Hz and 80 Hz. This phenomenon can be
described with a comodulogram, computed for instance with the `pactools
<http://pactools.github.io/>`_ Python library.

.. GENERATED FROM PYTHON SOURCE LINES 60-69

.. code-block:: default


    from pactools import Comodulogram

    comod = Comodulogram(fs=sfreq, low_fq_range=np.arange(0.2, 10.2, 0.2),
                         low_fq_width=2., method='duprelatour')
    comod.fit(data)
    comod.plot()
    plt.show()




.. image-sg:: /auto_examples/csc/images/sphx_glr_plot_cross_frequency_coupling_001.png
   :alt: plot cross frequency coupling
   :srcset: /auto_examples/csc/images/sphx_glr_plot_cross_frequency_coupling_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | comodulogram: DAR(10, 1)     [                                        ] 2% | 1.05 sec | comodulogram: DAR(10, 1)     [.                                       ] 4% | 1.63 sec | comodulogram: DAR(10, 1)     [..                                      ] 6% | 2.22 sec | comodulogram: DAR(10, 1)     [...                                     ] 8% | 2.80 sec | comodulogram: DAR(10, 1)     [....                                    ] 10% | 3.39 sec | comodulogram: DAR(10, 1)     [....                                    ] 12% | 3.97 sec | comodulogram: DAR(10, 1)     [.....                                   ] 14% | 4.54 sec | comodulogram: DAR(10, 1)     [......                                  ] 16% | 5.13 sec | comodulogram: DAR(10, 1)     [.......                                 ] 18% | 5.71 sec | comodulogram: DAR(10, 1)     [........                                ] 20% | 6.29 sec | comodulogram: DAR(10, 1)     [........                                ] 22% | 6.87 sec | comodulogram: DAR(10, 1)     [.........                               ] 24% | 7.48 sec | comodulogram: DAR(10, 1)     [..........                              ] 26% | 8.05 sec | comodulogram: DAR(10, 1)     [...........                             ] 28% | 8.62 sec | comodulogram: DAR(10, 1)     [............                            ] 30% | 9.22 sec | comodulogram: DAR(10, 1)     [............                            ] 32% | 9.81 sec | comodulogram: DAR(10, 1)     [.............                           ] 34% | 10.39 sec | comodulogram: DAR(10, 1)     [..............                          ] 36% | 10.95 sec | comodulogram: DAR(10, 1)     [...............                         ] 38% | 11.51 sec | comodulogram: DAR(10, 1)     [................                        ] 40% | 12.09 sec | comodulogram: DAR(10, 1)     [................                        ] 42% | 12.68 sec | comodulogram: DAR(10, 1)     [.................                       ] 44% | 13.24 sec | comodulogram: DAR(10, 1)     [..................                      ] 46% | 13.81 sec | comodulogram: DAR(10, 1)     [...................                     ] 48% | 14.40 sec | comodulogram: DAR(10, 1)     [....................                    ] 50% | 14.97 sec | comodulogram: DAR(10, 1)     [....................                    ] 52% | 15.51 sec | comodulogram: DAR(10, 1)     [.....................                   ] 54% | 16.07 sec | comodulogram: DAR(10, 1)     [......................                  ] 56% | 16.65 sec | comodulogram: DAR(10, 1)     [.......................                 ] 58% | 17.21 sec | comodulogram: DAR(10, 1)     [........................                ] 60% | 17.77 sec | comodulogram: DAR(10, 1)     [........................                ] 62% | 18.31 sec | comodulogram: DAR(10, 1)     [.........................               ] 64% | 18.87 sec | comodulogram: DAR(10, 1)     [..........................              ] 66% | 19.42 sec | comodulogram: DAR(10, 1)     [...........................             ] 68% | 19.98 sec | comodulogram: DAR(10, 1)     [............................            ] 70% | 20.53 sec | comodulogram: DAR(10, 1)     [............................            ] 72% | 21.07 sec | comodulogram: DAR(10, 1)     [.............................           ] 74% | 21.62 sec | comodulogram: DAR(10, 1)     [..............................          ] 76% | 22.16 sec | comodulogram: DAR(10, 1)     [...............................         ] 78% | 22.70 sec | comodulogram: DAR(10, 1)     [................................        ] 80% | 23.25 sec | comodulogram: DAR(10, 1)     [................................        ] 82% | 23.80 sec | comodulogram: DAR(10, 1)     [.................................       ] 84% | 24.36 sec | comodulogram: DAR(10, 1)     [..................................      ] 86% | 24.95 sec | comodulogram: DAR(10, 1)     [...................................     ] 88% | 25.50 sec | comodulogram: DAR(10, 1)     [....................................    ] 90% | 26.05 sec | comodulogram: DAR(10, 1)     [....................................    ] 92% | 26.60 sec | comodulogram: DAR(10, 1)     [.....................................   ] 94% | 27.17 sec | comodulogram: DAR(10, 1)     [......................................  ] 96% | 27.70 sec | comodulogram: DAR(10, 1)     [....................................... ] 98% | 28.23 sec | comodulogram: DAR(10, 1)     [........................................] 100% | 28.75 sec | comodulogram: DAR(10, 1) 
    [........................................] 100% | 28.75 sec | comodulogram: DAR(10, 1) 



.. GENERATED FROM PYTHON SOURCE LINES 70-71

We fit a CSC model on the data.

.. GENERATED FROM PYTHON SOURCE LINES 71-88

.. code-block:: default


    from alphacsc import learn_d_z

    params = dict(
        n_atoms=3,
        n_times_atom=int(sfreq * 1.0),  # 1000. ms
        reg=5.,
        n_iter=10,
        solver_z='l-bfgs',
        solver_z_kwargs=dict(factr=1e9),
        solver_d_kwargs=dict(factr=1e2),
        random_state=42,
        n_jobs=5,
        verbose=1)

    _, _, d_hat, z_hat, _ = learn_d_z(data, **params)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    V_0/10 .........




.. GENERATED FROM PYTHON SOURCE LINES 89-91

Plot the temporal patterns. Interestingly, we obtain prototypical
waveforms of the signal on which we can clearly see the CFC.

.. GENERATED FROM PYTHON SOURCE LINES 91-109

.. code-block:: default


    n_atoms, n_times_atom = d_hat.shape
    n_columns = min(6, n_atoms)
    n_rows = int(np.ceil(n_atoms // n_columns))
    figsize = (4 * n_columns, 3 * n_rows)
    fig, axes = plt.subplots(n_rows, n_columns, figsize=figsize, sharey=True)
    axes = axes.ravel()

    for kk in range(n_atoms):
        ax = axes[kk]
        time = np.arange(n_times_atom) / sfreq
        ax.plot(time, d_hat[kk], color='C%d' % kk)
        ax.set_xlim(0, n_times_atom / sfreq)
        ax.set(xlabel='Time (sec)', title="Temporal pattern %d" % kk)
        ax.grid(True)

    fig.tight_layout()
    plt.show()



.. image-sg:: /auto_examples/csc/images/sphx_glr_plot_cross_frequency_coupling_002.png
   :alt: Temporal pattern 0, Temporal pattern 1, Temporal pattern 2
   :srcset: /auto_examples/csc/images/sphx_glr_plot_cross_frequency_coupling_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 12 minutes  23.900 seconds)


.. _sphx_glr_download_auto_examples_csc_plot_cross_frequency_coupling.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cross_frequency_coupling.py <plot_cross_frequency_coupling.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cross_frequency_coupling.ipynb <plot_cross_frequency_coupling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
